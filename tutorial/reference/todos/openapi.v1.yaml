openapi: 3.0.0
info:
  title: To-dos
  version: '1.0'
  description: |-
    This OpenAPI v3 file represents a real API that lives at https://todos.stoplight.io.

    It exposes functionality to manage to-do lists.
  contact:
    name: Stoplight
    url: 'https://stoplight.io'
    email: support@stoplight.io
  license:
    name: MIT
servers:
  - url: 'https://todos.stoplight.io'
paths:
  '/todos/{todoId}':
    parameters:
      - name: todoId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: get-todo
      summary: Get Todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/todo-full.v1.json
              examples:
                Completed:
                  value:
                    id: 1
                    name: get food
                    completed: true
                    completed_at: '2020-08-04T18:16:23.471Z'
                    created_at: '2020-08-04T15:26:51.471Z'
                    updated_at: '2020-08-04T18:16:23.471Z'
                Not Completed:
                  value:
                    id: 2
                    name: get cider
                    completed: false
                    completed_at: null
                    created_at: '2020-08-04T15:30:00.471Z'
                    updated_at: null
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      operationId: update-todo
      summary: Update Todo
      requestBody:
        $ref: '#/components/requestBodies/todo-patch'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/todo-full.v1.json
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - apikey: []
    delete:
      operationId: DELETE_todo
      summary: Delete Todo
      responses:
        '204':
          description: Deleted
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - apikey: []
  /todos:
    post:
      operationId: POST_todos
      summary: Create Todo
      requestBody:
        $ref: '#/components/requestBodies/todo-create'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/todo-full.v1.json
              example:
                id: 9000
                name: So much todo!
                completed: false
                completed_at: null
                created_at: '2020-08-04T15:26:51.471Z'
                updated_at: null
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - apikey: []
      description: |-
        This creates a Todo object.

        Testing `inline code`.
    get:
      operationId: GET_todos
      summary: List Todos
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/todo-full.v1.json
              examples:
                response:
                  value:
                    - id: 1
                      name: design the thingz
                      completed: true
                      completed_at: '2020-08-06T12:11:21.471Z'
                      created_at: '2020-08-04T15:01:51.471Z'
                      updated_at: '2020-08-06T12:11:21.471Z'
                    - id: 2
                      name: mock the thingz
                      completed: true
                      completed_at: '2020-08-06T12:12:10.471Z'
                      created_at: '2020-08-04T15:24:32.471Z'
                      updated_at: '2020-08-06T12:12:10.471Z'
                    - id: 3
                      name: code the thingz
                      completed: false
                      completed_at: null
                      created_at: '2020-08-05T12:26:45.471Z'
                      updated_at: null
        '500':
          $ref: '#/components/responses/500'
components:
  parameters:
    skip:
      in: query
      name: skip
      schema: 
        type: string
    rate-limit:
      name: Rate-Limit
      in: header
      schema: 
        type: string
    limit:
      name: limit
      in: query
      schema: 
        type: string
  requestBodies:
    todo-create:
      content:
        application/json:
          schema:
            $ref: ./models/todo-create.v1.json
          example:
            name: Get groceries
            completed: false
    todo-patch:
      content:
        application/merge-patch+json:
          schema:
            $ref: ./models/todo-patch.v1.json
  responses:
    '401':
      description: Our shared 401 response.
      content: 
        application/json:
          schema:
            $ref: ../common/models/error.v1.yaml
          example:
            code: '401'
            message: Not Authorized
    '403':
      description: Our shared 403 response.
      content: 
        application/json:      
          schema:
            $ref: ../common/models/error.v1.yaml
          example:
            code: '403'
            message: Forbbiden
    '404':
      description: Our shared 404 response.
      content: 
        application/json:
          schema:
            $ref: ../common/models/error.v1.yaml
          example:
            code: '404'
            message: Not Found
    '500':
      description: Our shared 500 response.
      content: 
        application/json:
          schema:
            $ref: ../common/models/error.v1.yaml
          example:
            code: '500'
            message: Server Error
  securitySchemes:
    apikey:
      name: apikey
      type: apiKey
      in: query
      description: Use `?apikey=123` to authenticate requests. It's super secure.

